<?xml version="1.0" encoding="UTF-8"?>
<class name="SxClientRPC" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
    <brief_description>
        Client RPC interface.
    </brief_description>
    <description>
        Client RPC interface.
    </description>
    <tutorials></tutorials>
    <methods>
        <method name="pong">
            <return type="void" />
            <argument index="0" name="peer_id" type="int" />
            <description>
                Send a "pong" event to a specific peer.
            </description>
        </method>
        <method name="spawn_synchronized_scene_on">
            <return type="void" />
            <argument index="0" name="peer_id" type="int" />
            <argument index="1" name="parent" type="NodePath" />
            <argument index="2" name="name" type="String" />
            <argument index="3" name="scene_path" type="String" />
            <argument index="4" name="guid" type="String" />
            <argument index="5" name="owner_peer_id" type="int" />
            <argument index="6" name="master_configuration" type="Dictionary" />
            <description>
                Spawn a synchronized node on a specific peer.
            </description>
        </method>
        <method name="spawn_synchronized_scene_broadcast">
            <return type="void" />
            <argument index="0" name="parent" type="NodePath" />
            <argument index="1" name="name" type="String" />
            <argument index="2" name="scene_path" type="String" />
            <argument index="3" name="guid" type="String" />
            <argument index="4" name="owner_peer_id" type="int" />
            <argument index="5" name="master_configuration" type="Dictionary" />
            <description>
                Spawn a synchronized node on all peers.
            </description>
        </method>
        <method name="synchronize_node_broadcast">
            <return type="void" />
            <argument index="0" name="path" type="NodePath" />
            <argument index="1" name="data" type="Dictionary" />
            <description>
                Synchronize data from a specific node on all peers.
            </description>
        </method>
        <method name="remove_synchronized_node_on">
            <return type="void" />
            <argument index="0" name="peer_id" type="int" />
            <argument index="1" name="path" type="NodePath" />
            <description>
                Remove a synchronized node on a specific peer.
            </description>
        </method>
        <method name="remove_synchronized_node_broadcast">
            <return type="void" />
            <argument index="0" name="path" type="NodePath" />
            <description>
                Remove a synchronized node on all peers.
            </description>
        </method>
        <method name="synchronize_players_broadcast">
            <return type="void" />
            <argument index="0" name="players" type="Dictionary" />
            <description>
                Synchronize players data on all peers.
            </description>
        </method>
    </methods>
    <members>
    </members>
    <signals>
        <signal name="spawned_from_server">
            <argument index="0" name="node" type="Node" />
            <description>
                When a node was spawn from the server request.
            </description>
        </signal>
        <signal name="removed_from_server">
            <argument index="0" name="node" type="Node" />
            <description>
                When a node was removed from the server request.
            </description>
        </signal>
        <signal name="players_updated">
            <argument index="0" name="players" type="Dictionary" />
            <description>
                On players data update (for example a username change).
            </description>
        </signal>
    </signals>
    <constants></constants>
</class>