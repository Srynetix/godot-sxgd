<?xml version="1.0" encoding="UTF-8"?>
<class name="SxNetwork" inherits="Reference" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
    <brief_description>
        Network helpers.
    </brief_description>
    <description>
        Generic network helpers.
    </description>
    <tutorials></tutorials>
    <methods>
        <method name="get_nuid" qualifiers="static">
            <return type="int" />
            <argument index="0" name="node" type="Node" />
            <argument index="1" name="multiplayer_node_path" type="NodePath" />
            <description>
                Shortcut to get the network unique ID for the scene tree which contains the target node.

                [source,gdscript]
                .Example
                ----
                # Script for a random node
                extends Node

                func _ready() -> void:
                    # Get the current network ID
                    var my_id := SxNetwork.get_nuid(self, NodePath(""))
                ----
            </description>
        </method>
        <method name="get_sender_nuid" qualifiers="static">
            <return type="int" />
            <argument index="0" name="node" type="Node" />
            <argument index="1" name="multiplayer_node_path" type="NodePath" />
            <description>
                Shortcut to get the sender network unique ID for the scene tree which contains the target node.

                [source,gdscript]
                .Example
                ----
                # Script for a random node
                extends Node

                @rpc func _on_master_call():
                    # Get the sender network ID
                    var sender_id := SxNetwork.get_sender_nuid(self, NodePath(""))
                ----
            </description>
        </method>
        <method name="is_root" qualifiers="static">
            <return type="bool" />
            <argument index="0" name="node" type="Node" />
            <argument index="1" name="multiplayer_node_path" type="NodePath" />
            <description>
                Shortcut to check if the current network unique ID is the number 1.

                [source,gdscript]
                .Example
                ----
                # Script for a random node
                extends Node

                @rpc func _on_remote_call():
                    # Am I root?
                    if SxNetwork.is_root(self, NodePath("")):
                        print("Yay!")
                ----
            </description>
        </method>
        <method name="generate_network_name" qualifiers="static">
            <return type="String" />
            <argument index="0" name="name" type="String" />
            <argument index="1" name="guid" type="String" />
            <description>
                Generate a network name from a node name and a UUID.

                [source,gdscript]
                .Example
                ----
                var name = SxNetwork.generate_network_name("MyNode", "60b9798a-e989-4a74-8b78-d2fe544fcca2")
                # => name = "MyNode#60b9798a-e989-4a74-8b78-d2fe544fcca2"

                # Edge case: if the name and the GUID is the same value, only one is kept.
                var name = SxNetwork.generate_network_name("60b9798a-e989-4a74-8b78-d2fe544fcca2", "60b9798a-e989-4a74-8b78-d2fe544fcca2")
                # => name = "60b9798a-e989-4a74-8b78-d2fe544fcca2"
                ----
            </description>
        </method>
        <method name="is_multiplayer_authority" qualifiers="static">
            <return type="bool" />
            <argument index="0" name="node" type="Node" />
            <argument index="1" name="multiplayer_node_path" type="NodePath" />
            <description>
                Check if a node is a multiplayer authority.
                If there is no network peer setup, it will not raise an error, it will return true.

                [source,gdscript]
                .Example
                ----
                func _ready() -> void:
                    if SxNetwork.is_multiplayer_authority(self, NodePath("")):
                        print("I have the control!")
                ----
            </description>
        </method>
        <method name="get_multiplayer_authority" qualifiers="static">
            <return type="int" />
            <argument index="0" name="node" type="Node" />
            <argument index="1" name="multiplayer_node_path" type="NodePath" />
            <description>
                Get the multiplayer authority ID for a target node.
                If there is no network peer setup, it will not raise an error, it will return 1 (for root).

                [source,gdscript]
                .Example
                ----
                func _ready() -> void:
                    var master_id := SxNetwork.get_multiplayer_authority(self, NodePath(""))
                ----
            </description>
        </method>
        <method name="is_server" qualifiers="static">
            <return type="bool" />
            <argument index="0" name="tree" type="SceneTree" />
            <argument index="1" name="multiplayer_node_path" type="NodePath" />
            <description>
                Check if the target tree is a server.
                If there is no network peer setup, it will not raise an error, it will return true.

                [source,gdscript]
                .Example
                ----
                func _ready() -> void:
                    var is_server := SxNetwork.is_server(get_tree(), NodePath(""))
                ----
            </description>
        </method>
        <method name="is_network_enabled" qualifiers="static">
            <return type="bool" />
            <argument index="0" name="tree" type="SceneTree" />
            <argument index="1" name="multiplayer_node_path" type="NodePath" />
            <description>
                Check if the target tree has a network peer enabled.

                [source,gdscript]
                .Example
                ----
                func _ready() -> void:
                    var is_network_peer_on := SxNetwork.is_network_enabled(get_tree(), NodePath(""))
                ----
            </description>
        </method>
        <method name="uuid4" qualifiers="static">
            <return type="String" />
            <description>
                Generate a UUID4 string.

                [source,gdscript]
                .Example
                ----
                var uuid = SxNetwork.uuid4()
                # => uuid = "60b9798a-e989-4a74-8b78-d2fe544fcca2"
                ----
            </description>
        </method>
    </methods>
</class>