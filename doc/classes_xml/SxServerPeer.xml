<?xml version="1.0" encoding="UTF-8"?>
<class name="SxServerPeer" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
    <brief_description>
        Configurable network peer, server side.
    </brief_description>
    <description>
        Configurable network peer, server side.
    </description>
    <tutorials></tutorials>
    <classes>
        <class name="SxServerPeer.SxSynchronizedScenePath" inherits="Reference">
            <description>
                A synchronized scene path: wrapper around a scene creation for network dispatch.
            </description>
            <members>
                <member name="guid" type="String">
                    Scene GUID.
                </member>
                <member name="name" type="String">
                    Scene name.
                </member>
                <member name="parent" type="NodePath">
                    Parent node path.
                </member>
                <member name="scene_path" type="String">
                    Scene path.
                </member>
                <member name="owner_peer_id" type="int">
                    Peer ID of the node owner.
                </member>
                <member name="master_configuration" type="Dictionary">
                    Master configuration, contains owner info for child nodes.
                </member>
            </members>
        </class>
    </classes>
    <methods>
        <method name="get_players">
            <return type="Dictionary" />
            <description>
                Get known players data.
            </description>
        </method>
        <method name="spawn_synchronized_scene">
            <return type="Node" />
            <argument index="0" name="parent" type="NodePath" />
            <argument index="1" name="scene_path" type="String" />
            <argument index="2" name="owner_peer_id" type="int" default="1" />
            <argument index="3" name="master_configuration" type="Dictionary" default="{}" />
            <description>
                Spawn a synchronized scene on the server, with replicas sent to connected clients.
            </description>
        </method>
        <method name="spawn_synchronized_named_scene">
            <return type="Node" />
            <argument index="0" name="parent" type="NodePath" />
            <argument index="1" name="scene_path" type="String" />
            <argument index="2" name="scene_name" type="String" />
            <argument index="3" name="owner_peer_id" type="int" default="1" />
            <argument index="4" name="master_configuration" type="Dictionary" default="{}" />
            <description>
                Same thing than `spawn_synchronized_scene`, but with a specific node name.
            </description>
        </method>
        <method name="spawn_synchronized_scene_mapped">
            <return type="Node" />
            <argument index="0" name="parent" type="NodePath" />
            <argument index="1" name="name" type="String" />
            <argument index="2" name="server_scene_path" type="String" />
            <argument index="3" name="client_scene_path" type="String" />
            <argument index="4" name="owner_peer_id" type="int" default="1" />
            <argument index="5" name="master_configuration" type="Dictionary" default="{}" />
            <description>
                Spawn a synchronized named scene on the server using a specific scene path for the server and a different path for the client.
                +
                This method is useful if you want to mimic the server nodes on the client with different scene paths.
            </description>
        </method>
        <method name="remove_synchronized_node">
            <return type="void" />
            <argument index="0" name="node" type="Node" />
            <description>
                Remove a node from the server and the connected clients.
            </description>
        </method>
    </methods>
    <members>
        <member name="server_port" type="int">
            Server port.
        </member>
        <member name="max_players" type="int">
            Max players allowed to join.
        </member>
        <member name="rpc_service" type="SxRPCService">
            Access to the RPC service.
        </member>
    </members>
    <signals>
        <signal name="peer_connected">
            <argument index="0" name="peer_id" type="int" />
            <description>
                On a distant peer connection.
            </description>
        </signal>
        <signal name="peer_disconnected">
            <argument index="0" name="peer_id" type="int" />
            <description>
                On a distant peer disconnection.
            </description>
        </signal>
        <signal name="players_updated">
            <argument index="0" name="players" type="Dictionary" />
            <description>
                On players data update (for example a username change).
            </description>
        </signal>
    </signals>
    <constants></constants>
</class>